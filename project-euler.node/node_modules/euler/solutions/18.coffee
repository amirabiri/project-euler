parse = require 'euler/common/parse'
data  = require 'euler/common/data'

triangle = null

exports.initialize = ->
  triangle = parse.matrix data.getFilename()

exports.solve = ->
  paths = triangle.last().map((num)-> new Path(num))

  for i in [triangle.length - 2 .. 0] by -1
    nextPaths = []
    for j in [0..triangle[i].length - 1]
      pathToTake = if paths[j].sum > paths[j + 1].sum then paths[j] else paths[j + 1]
      nextPaths[j] = pathToTake.add(triangle[i][j])
    paths = nextPaths

  paths[0].sum

class Path
  constructor: (sum, path)->
    @sum = sum
    if path?
      @path = path.clone()
    else
      @path = [ sum ];

  add: (num)->
    newPath = @path.clone()
    newPath.push num
    new Path @sum + num, newPath