termLengthCache = null

exports.solve = ->
  termLengthCache = []

  longest = 0
  term    = 0

  for n in [1..1000000]
    length = termLength(n)
    if length > longest
      longest = length
      term = n

  return term

termLength = (number)->
  if not termLengthCache[number - 1]?
    findTermLength(number)

  return termLengthCache[number - 1]

findTermLength = (number)->
  path = []

  while number != 1 and (number > 1000000 || not termLengthCache[number - 1]?)
    path.push number
    number = nextTerm number

  if number == 1
    setCache path, 1
  else
    setCache path, termLengthCache[number - 1]

nextTerm = (n)->
  if n % 2 == 0
    return n / 2
  else
    return 3 * n + 1

setCache = (path, start)->
  for number, i in path
    if number <= 1000000
      termLengthCache[number - 1] = path.length - i + start
