numbers = require 'euler/common/numbers'

exports.solve = ->
  superset = {}

  for n in [2..20]
    for factor, count of reduceToMap(numbers.getPrimeFactors(n))
      supersetCount = superset[factor] || 0
      superset[factor] = count if count > supersetCount

  num = 1
  for factor, count of superset
    num *= Math.pow(factor, count)

  return num

reduceToMap = (numbers)->
  map = {}
  for n in numbers
    map[n] = (map[n] || 0) + 1
  return map