exports.getDivisors = (n)->
  divisors = [ 1 ]
  sqr = Math.floor Math.sqrt(n)

  x = 2
  while x <= sqr
    if n % x == 0
      divisors.push x
      opp = n / x;
      if opp != x
        divisors.push opp
    x++

  return divisors

exports.sum = (arr)-> arr.reduce((a, b)-> a + b)

P30 = [1, 7, 11, 13, 17, 19, 23, 29]

exports.ProbablePrimesGenerator = class ProbablePrimesGenerator
  constructor: ->
    @i = 0
    @k = 0

  next: ->
    @i++
    if @i == P30.length
      @k++
      @i = 0
    return @k * 30 + P30[@i]

exports.PrimesIterator = class PrimesIterator
  constructor: ->
    @primes = [2, 3, 5]
    @probablePrimesGenerator = new exports.ProbablePrimesGenerator()

  next: ->
    number = @probablePrimesGenerator.next()
    while not @_isPrime number
      number = @probablePrimesGenerator.next()
    @primes.push number
    return number

  _isPrime: (number)->
    sqr = Math.floor Math.sqrt number
    for prime in @primes
      return true  if prime > sqr
      return false if number % prime == 0
    return true

exports.getPrimeFactors = (number)->
  factors = []

  for i in [2, 3, 5]
    while number % i == 0
      factors.push i
      number /= i

  probablePrimes = new ProbablePrimesGenerator()
  x = probablePrimes.next()
  while x <= number / x
    while number % x == 0
      factors.push x
      number /= x
    x = probablePrimes.next()

  if number > 1
    factors.push number

  return factors
